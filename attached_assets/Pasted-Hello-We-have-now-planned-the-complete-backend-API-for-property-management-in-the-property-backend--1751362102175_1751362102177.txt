Hello! We have now planned the complete backend API for property management in the property_backend_plan.md file. The next and final step is to build the frontend user interface within my admin dashboard for managing these properties.
Your task is to create a detailed implementation plan for the React frontend, leveraging my existing tech stack.
Phase 1: Plan Review
First, thoroughly review the contents of property_backend_plan.md. Pay close attention to the API endpoint definitions (GET /api/properties, POST /api/properties, etc.) and the structure of the Property data model. All frontend components must be designed to consume these specific APIs.
Also, re-analyze my frontend architecture:
Framework: React
UI Library: shadcn/ui (use its components like Table, Input, Button, Dialog, Select where appropriate).
Data Fetching: TanStack Query (React Query). Use useQuery for fetching data and useMutation for creating, updating, and deleting data.
Phase 2: Frontend Implementation Plan
Based on your review, generate a new file named property_frontend_plan.md. This file must provide a complete, step-by-step plan to build the property management UI.
The plan must be structured into the following components:
1. Main Property Management Page
File to Create: [Propose a path and filename, e.g., app/admin/properties/page.tsx]
Action: This will be the main page. It should orchestrate the other components. Provide the full code for this page component. It should include:
A heading, like "Property Management".
A "Create New Property" button that opens a dialog/modal.
The PropertiesDataTable component (described below).
2. Properties Data Table Component
File to Create: [Propose a path, e.g., components/admin/properties/data-table.tsx]
Action: Provide the code for a reusable data table component using shadcn/ui's Table.
Data Fetching: Use useQuery from TanStack Query to fetch data from the GET /api/properties endpoint.
Features:
Display key property details in columns (e.g., Title, Type, Status, Price).
Include a "Filter by Status" dropdown (Select component) and a "Search by Title" input field (Input component). These controls should refetch the query with the appropriate query parameters (?status=... or ?search=...).
Add an "Actions" column for each row with "Edit" and "Delete" buttons.
3. Create/Edit Property Form Component
File to Create: [Propose a path, e.g., components/admin/properties/property-form.tsx]
Action: Provide the code for a form that can be used for both creating and editing a property. This form should appear inside a shadcn/ui Dialog or Sheet.
Fields: The form must include input fields for all property attributes defined in the backend plan (title, description, price, location, status, type).
State Management: Use standard React state (useState) to manage form inputs.
Submission Logic: Use useMutation from TanStack Query to handle form submission.
If editing, it should call the PATCH /api/properties/:id endpoint.
If creating, it should call the POST /api/properties endpoint.
On success, the mutation should invalidate the main properties query to automatically refresh the data table.
4. Image Uploader Component
File to Create: [Propose a path, e.g., components/admin/properties/image-uploader.tsx]
Action: This component will be part of the "Edit Property" view. Provide the code for an image uploader.
Functionality: It should display currently associated images and have a file input button to upload new ones. When files are selected, it should use a useMutation hook to send them to the POST /api/properties/:id/images endpoint.
5. Delete Confirmation Dialog
Action: When the "Delete" button in the data table is clicked, it should open a shadcn/ui AlertDialog.
Functionality: The dialog should ask for confirmation (e.g., "Are you sure you want to delete this property?"). On confirmation, a useMutation hook should call the DELETE /api/properties/:id endpoint and then refresh the data table. Provide the code for integrating this logic.
Your final output in property_frontend_plan.md should be a practical guide with all the necessary TypeScript/JSX code and explanations for building a modern, responsive, and fully functional property management interface.